{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      model: {\n        name: '',\n        avatar: '',\n        categories: []\n      }\n    };\n  },\n  created() {\n    // 向服务器请求关联英雄数据值\n    this.fetchCategories();\n    // 当用户需要编辑时，获取用户信息\n    this.id && this.fetch();\n  },\n  methods: {\n    // 当前端上传文件成功后的操作\n    afterUpdate(res) {\n      this.model.avatar = res.url;\n    },\n    async save() {\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\n      let res;\n      if (this.id) {\n        res = this.$http.put(`/rest/hero/${this.id}`, this.model);\n      } else {\n        res = await this.$http.post('/rest/hero', this.model);\n      }\n      this.$router.push('/heros/list');\n      this.$message({\n        type: 'success',\n        message: '保存成功'\n      });\n    },\n    async fetch() {\n      const item = await this.$http.get(`/rest/hero/${this.id}`);\n      this.model = item.data;\n    },\n    async fetchCategories() {\n      const items = await this.$http.get('/rest/categories');\n      this.categories = items.data;\n    }\n  },\n  // 获取数据库中所有的一级分数据\n\n  props: {\n    id: {}\n  }\n};","map":{"version":3,"names":["data","model","name","avatar","categories","created","fetchCategories","id","fetch","methods","afterUpdate","res","url","save","$http","put","post","$router","push","$message","type","message","item","get","items","props"],"sources":["src/views/HeroEdit.vue"],"sourcesContent":["<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}分类</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"英雄名\">\r\n        <el-input v-model=\"model.name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"称号\">\r\n        <el-input v-model=\"model.title\"></el-input>\r\n      </el-form-item>\r\n      <!-- 用户类型的选择 -->\r\n      <el-form-item label=\"类型\">\r\n        <el-select v-model=\"model.categories\">\r\n          <el-option></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"英雄图标\">\r\n        <!-- action 文件上传服务端地址 on-success 当上传文件成功后做的事情 -->\r\n        <el-upload class=\"avatar-uploader\" :action=\"$http.defaults.baseURL + '/uploads'\" :show-file-list=\"false\" :on-success=\"afterUpdate\">\r\n          <img v-if=\"model.avatar\" :src=\"model.avatar\" class=\"avatar\" />\r\n          <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n        </el-upload>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {\r\n        name: '',\r\n        avatar: '',\r\n        categories: []\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 向服务器请求关联英雄数据值\r\n    this.fetchCategories()\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    // 当前端上传文件成功后的操作\r\n    afterUpdate(res) {\r\n      this.model.avatar = res.url\r\n    },\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/hero/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/hero', this.model)\r\n      }\r\n      this.$router.push('/heros/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const item = await this.$http.get(`/rest/hero/${this.id}`)\r\n      this.model = item.data\r\n    },\r\n    async fetchCategories() {\r\n      const items = await this.$http.get('/rest/categories')\r\n      this.categories = items.data\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.avatar-uploader .el-upload {\r\n  border: 1px dashed #d9d9d9;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.avatar-uploader .el-upload:hover {\r\n  border-color: #409eff;\r\n}\r\n.avatar-uploader-icon {\r\n  font-size: 28px;\r\n  color: #8c939d;\r\n  width: 178px;\r\n  height: 178px;\r\n  line-height: 178px;\r\n  text-align: center;\r\n}\r\n.avatar {\r\n  width: 178px;\r\n  height: 178px;\r\n  display: block;\r\n}\r\n</style>\r\n"],"mappings":";AAgCA;EACAA,KAAA;IACA;MACAC,KAAA;QACAC,IAAA;QACAC,MAAA;QACAC,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,eAAA;IACA;IACA,KAAAC,EAAA,SAAAC,KAAA;EACA;EACAC,OAAA;IACA;IACAC,YAAAC,GAAA;MACA,KAAAV,KAAA,CAAAE,MAAA,GAAAQ,GAAA,CAAAC,GAAA;IACA;IACA,MAAAC,KAAA;MACA;MACA,IAAAF,GAAA;MACA,SAAAJ,EAAA;QACAI,GAAA,QAAAG,KAAA,CAAAC,GAAA,oBAAAR,EAAA,SAAAN,KAAA;MACA;QACAU,GAAA,cAAAG,KAAA,CAAAE,IAAA,oBAAAf,KAAA;MACA;MACA,KAAAgB,OAAA,CAAAC,IAAA;MACA,KAAAC,QAAA;QACAC,IAAA;QACAC,OAAA;MACA;IACA;IACA,MAAAb,MAAA;MACA,MAAAc,IAAA,cAAAR,KAAA,CAAAS,GAAA,oBAAAhB,EAAA;MACA,KAAAN,KAAA,GAAAqB,IAAA,CAAAtB,IAAA;IACA;IACA,MAAAM,gBAAA;MACA,MAAAkB,KAAA,cAAAV,KAAA,CAAAS,GAAA;MACA,KAAAnB,UAAA,GAAAoB,KAAA,CAAAxB,IAAA;IACA;EACA;EACA;;EAEAyB,KAAA;IACAlB,EAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}