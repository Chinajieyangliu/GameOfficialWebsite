{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      model: {\n        items: []\n      }\n    };\n  },\n  created() {\n    // 当用户需要编辑时，获取用户信息\n    this.id && this.fetch();\n  },\n  methods: {\n    async save() {\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\n      let res;\n      if (this.id) {\n        res = this.$http.put(`/rest/advertisement/${this.id}`, this.model);\n      } else {\n        res = await this.$http.post('/rest/advertisement', this.model);\n      }\n      this.$router.push('/ads/list');\n      this.$message({\n        type: 'success',\n        message: '保存成功'\n      });\n    },\n    async fetch() {\n      const res = await this.$http.get(`/rest/advertisement/${this.id}`);\n      this.model = Object.assign({}, this.model, res.data);\n    }\n  },\n  // 获取数据库中所有的一级分数据\n\n  props: {\n    id: {}\n  }\n};","map":{"version":3,"names":["data","model","items","created","id","fetch","methods","save","res","$http","put","post","$router","push","$message","type","message","get","Object","assign","props"],"sources":["src/views/AdsEdit.vue"],"sourcesContent":["<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}广告</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"添加广吿名\">\r\n        <el-input v-model=\"model.name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"添加广吿名\">\r\n        <el-button @click=\"model.items.push({})\"> <i class=\"el-icon-plus\"></i> 添加技能</el-button>\r\n        <!-- 点击添加图标会添加数据框供天数据 -->\r\n        <el-row type=\"flex;\" style=\"flex-wrap: wrap\">\r\n          <el-col :md=\"16\" v-for=\"(item, i) in model.items\" :key=\"i\">\r\n            <!-- 添加英雄名称 -->\r\n            <el-form-item label=\"广告(Url}\">\r\n              <el-input v-model=\"item.name\"></el-input>\r\n            </el-form-item>\r\n            <!-- 添加英雄头像 -->\r\n            <el-form-item label=\"图片\" style=\"margin-top: 0.6rem\">\r\n              <el-upload\r\n                class=\"avatar-uploader\"\r\n                :action=\"$http.defaults.baseURL + '/uploads'\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"\r\n                  (res) => {\r\n                    $set(item, 'image', res.url)\r\n                  }\r\n                \"\r\n              >\r\n                <img v-if=\"item.image\" :src=\"item.image\" class=\"avatar\" />\r\n                <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n              </el-upload>\r\n            </el-form-item>\r\n\r\n            <el-form-item>\r\n              <el-button size=\"small\" type=\"danger\" @click=\"model.items.splice(i, 1)\">删除</el-button>\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {\r\n        items: []\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/advertisement/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/advertisement', this.model)\r\n      }\r\n      this.$router.push('/ads/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const res = await this.$http.get(`/rest/advertisement/${this.id}`)\r\n      this.model = Object.assign({}, this.model, res.data)\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";AAiDA;EACAA,KAAA;IACA;MACAC,KAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,EAAA,SAAAC,KAAA;EACA;EACAC,OAAA;IACA,MAAAC,KAAA;MACA;MACA,IAAAC,GAAA;MACA,SAAAJ,EAAA;QACAI,GAAA,QAAAC,KAAA,CAAAC,GAAA,6BAAAN,EAAA,SAAAH,KAAA;MACA;QACAO,GAAA,cAAAC,KAAA,CAAAE,IAAA,6BAAAV,KAAA;MACA;MACA,KAAAW,OAAA,CAAAC,IAAA;MACA,KAAAC,QAAA;QACAC,IAAA;QACAC,OAAA;MACA;IACA;IACA,MAAAX,MAAA;MACA,MAAAG,GAAA,cAAAC,KAAA,CAAAQ,GAAA,6BAAAb,EAAA;MACA,KAAAH,KAAA,GAAAiB,MAAA,CAAAC,MAAA,UAAAlB,KAAA,EAAAO,GAAA,CAAAR,IAAA;IACA;EACA;EACA;;EAEAoB,KAAA;IACAhB,EAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}