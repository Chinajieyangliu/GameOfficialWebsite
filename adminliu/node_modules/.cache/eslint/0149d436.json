[{"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\main.js":"1","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\App.vue":"2","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\https.js":"3","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\plugins\\element.js":"4","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\router\\index.js":"5","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ViewMian.vue":"6","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\CategoriesEdit.vue":"7","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\CategoriesList.vue":"8","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ItemEdit.vue":"9","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ItemList.vue":"10","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\HeroEdit.vue":"11","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\HeroList.vue":"12","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ArticlesEdit.vue":"13","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdsEdit.vue":"14","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdsList.vue":"15","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ArticlesList.vue":"16","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdminUserEdit.vue":"17","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdminUserList.vue":"18"},{"size":495,"mtime":1688951918524,"results":"19","hashOfConfig":"20"},{"size":219,"mtime":1685945713499,"results":"21","hashOfConfig":"20"},{"size":1193,"mtime":1688950853559,"results":"22","hashOfConfig":"20"},{"size":119,"mtime":1685931476436,"results":"23","hashOfConfig":"20"},{"size":2914,"mtime":1688472829371,"results":"24","hashOfConfig":"20"},{"size":3403,"mtime":1688721054321,"results":"25","hashOfConfig":"20"},{"size":2023,"mtime":1688952003834,"results":"26","hashOfConfig":"20"},{"size":1824,"mtime":1688220075804,"results":"27","hashOfConfig":"20"},{"size":2166,"mtime":1688952028158,"results":"28","hashOfConfig":"20"},{"size":1936,"mtime":1688364684536,"results":"29","hashOfConfig":"20"},{"size":10482,"mtime":1688952016416,"results":"30","hashOfConfig":"20"},{"size":2017,"mtime":1688309891236,"results":"31","hashOfConfig":"20"},{"size":2604,"mtime":1688951979507,"results":"32","hashOfConfig":"20"},{"size":2989,"mtime":1688951997663,"results":"33","hashOfConfig":"20"},{"size":1765,"mtime":1688389141155,"results":"34","hashOfConfig":"20"},{"size":1727,"mtime":1688366121677,"results":"35","hashOfConfig":"20"},{"size":1609,"mtime":1688952231980,"results":"36","hashOfConfig":"20"},{"size":1743,"mtime":1688443475253,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d9ub5m",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\main.js",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\App.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\https.js",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\plugins\\element.js",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\router\\index.js",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ViewMian.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\CategoriesEdit.vue",["79"],"<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}分类</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"上级分类\">\r\n        <el-select v-model=\"model.parent\">\r\n          <!-- :key是关键子必须写 ：label是每个下拉选框的名称 :value是下拉选框的真实对应值， -->\r\n          <el-option v-for=\"item in parents\" :key=\"item._id\" :label=\"item.name\" :value=\"item._id\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"分类名\">\r\n        <el-input v-model=\"model.name\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {},\r\n      parents: []\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchParents()\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res // eslint-disable-line no-unused-vars\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/categories/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/categories', this.model)\r\n      }\r\n      this.$router.push('/categories/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const item = await this.$http.get(`/rest/categories/${this.id}`)\r\n      this.model = item.data\r\n    },\r\n    async fetchParents() {\r\n      const item = await this.$http.get('/rest/categories')\r\n      this.parents = item.data\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\CategoriesList.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ItemEdit.vue",["80"],"<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}物品</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"装备名\">\r\n        <el-input v-model=\"model.name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"上传图标\">\r\n        <!-- action 文件上传服务端地址 on-success 当上传文件成功后做的事情 -->\r\n        <el-upload class=\"avatar-uploader\" :headers=\"getAuthHeaders()\" :action=\"$http.defaults.baseURL + '/uploads'\" :show-file-list=\"false\" :on-success=\"afterUpdate\">\r\n          <img v-if=\"model.icon\" :src=\"model.icon\" class=\"avatar\" />\r\n          <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n        </el-upload>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {}\r\n    }\r\n  },\r\n  created() {\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    // 当前端上传文件成功后的操作\r\n    afterUpdate(res) {\r\n      // res是服务端响应的数据，里面有保存着服务端图片存放的地址\r\n      this.$set(this.model, 'icon', res.url)\r\n    },\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res // eslint-disable-line no-unused-vars\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/item/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/item', this.model)\r\n      }\r\n      this.$router.push('/items/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const item = await this.$http.get(`/rest/item/${this.id}`)\r\n      this.model = item.data\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ItemList.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\HeroEdit.vue",["81"],"<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}英雄</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-tabs type=\"border-card\" value=\"message\">\r\n        <el-tab-pane label=\"基础信息\" name=\"message\">\r\n          <el-form-item label=\"英雄\">\r\n            <el-input v-model=\"model.name\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"称号\">\r\n            <el-input v-model=\"model.title\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"图标\">\r\n            <!-- action 文件上传服务端地址 on-success 当上传文件成功后做的事情 -->\r\n            <el-upload class=\"avatar-uploader\" :headers=\"getAuthHeaders()\" :action=\"$http.defaults.baseURL + '/uploads'\" :show-file-list=\"false\" :on-success=\"afterUpdate\">\r\n              <img v-if=\"model.avatar\" :src=\"model.avatar\" class=\"avatar\" />\r\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n            </el-upload>\r\n          </el-form-item>\r\n\r\n          <!-- 上传背景图片 -->\r\n          <el-form-item label=\"背景图片\">\r\n            <el-upload class=\"avatar-uploader\" :headers=\"getAuthHeaders()\" :action=\"$http.defaults.baseURL + '/uploads'\" :show-file-list=\"false\" :on-success=\"(res) => $set(model, 'banner', res.url)\">\r\n              <img style=\"width: 300px; height: auto\" v-if=\"model.banner\" :src=\"model.banner\" class=\"avatar\" />\r\n              <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n            </el-upload>\r\n          </el-form-item>\r\n          <!-- 用户类型的选择 -->\r\n          <el-form-item label=\"类型\">\r\n            <el-select v-model=\"model.categories\" multiple>\r\n              <el-option v-for=\"item of categories\" :key=\"item._id\" :label=\"item.name\" :value=\"item._id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 英雄上手难度 -->\r\n          <el-form-item label=\"难度\">\r\n            <el-rate style=\"margin-top: 0.68rem\" :max=\"9\" show-score v-model=\"model.scores.difficult\"></el-rate>\r\n          </el-form-item>\r\n          <el-form-item label=\"技能\">\r\n            <el-rate style=\"margin-top: 0.68rem\" :max=\"9\" show-score v-model=\"model.scores.skills\"></el-rate>\r\n          </el-form-item>\r\n          <el-form-item label=\"攻击\">\r\n            <el-rate style=\"margin-top: 0.68rem\" :max=\"9\" show-score v-model=\"model.scores.attack\"></el-rate>\r\n          </el-form-item>\r\n          <el-form-item label=\"生存\">\r\n            <el-rate style=\"margin-top: 0.68rem\" :max=\"9\" show-score v-model=\"model.scores.survive\"></el-rate>\r\n          </el-form-item>\r\n          <!-- 英雄出装 -->\r\n          <el-form-item label=\"顺风出装\">\r\n            <el-select v-model=\"model.items1\" multiple>\r\n              <el-option v-for=\"item of items\" :key=\"item._id\" :label=\"item.name\" :value=\"item._id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"逆风出装\">\r\n            <el-select v-model=\"model.items2\" multiple>\r\n              <el-option v-for=\"item of items\" :key=\"item._id\" :label=\"item.name\" :value=\"item._id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <!-- 英雄使用技巧  -->\r\n          <el-form-item label=\"使用技巧\">\r\n            <el-input type=\"textarea\" v-model=\"model.usageTips\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"对抗技巧\">\r\n            <el-input type=\"textarea\" v-model=\"model.battleTips\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"团战技巧\">\r\n            <el-input type=\"textarea\" v-model=\"model.teamTips\"></el-input>\r\n          </el-form-item>\r\n        </el-tab-pane>\r\n        <!-- 英雄技能介绍 -->\r\n        <el-tab-pane label=\"技能\" name=\"skills\">\r\n          <el-button @click=\"model.skills.push({})\"> <i class=\"el-icon-plus\"></i> 添加技能</el-button>\r\n          <!-- 点击添加图标会添加数据框供数据 -->\r\n          <el-row type=\"flex;\" style=\"flex-wrap: wrap\">\r\n            <el-col :md=\"12\" v-for=\"(item, i) in model.skills\" :key=\"i\">\r\n              <!-- 添加英雄名称 -->\r\n              <el-form-item label=\"名称\">\r\n                <el-input v-model=\"item.name\"></el-input>\r\n              </el-form-item>\r\n              <!-- 添加英雄冷却 -->\r\n              <el-form-item label=\"冷却\">\r\n                <el-input v-model=\"item.delay\"></el-input>\r\n              </el-form-item>\r\n              <!-- 添加英雄蓝量消耗 -->\r\n              <el-form-item label=\"蓝量\">\r\n                <el-input v-model=\"item.cost\"></el-input>\r\n              </el-form-item>\r\n              <!-- 添加英雄头像 -->\r\n              <el-form-item label=\"头像\">\r\n                <el-upload\r\n                  class=\"avatar-uploader\"\r\n                  :headers=\"getAuthHeaders()\"\r\n                  :action=\"$http.defaults.baseURL + '/uploads'\"\r\n                  :show-file-list=\"false\"\r\n                  :on-success=\"\r\n                    (res) => {\r\n                      $set(item, 'icon', res.url)\r\n                    }\r\n                  \"\r\n                >\r\n                  <img v-if=\"item.icon\" :src=\"item.icon\" class=\"avatar\" />\r\n                  <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n                </el-upload>\r\n              </el-form-item>\r\n              <!-- 添加英雄描述 -->\r\n              <el-form-item label=\"描述\">\r\n                <el-input type=\"textarea\" v-model=\"item.description\"></el-input>\r\n              </el-form-item>\r\n              <!-- 添加英雄小提示 -->\r\n              <el-form-item label=\"提示\">\r\n                <el-input v-model=\"item.tips\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button size=\"small\" type=\"danger\" @click=\"model.skills.splice(i, 1)\">删除</el-button>\r\n              </el-form-item>\r\n            </el-col>\r\n          </el-row>\r\n        </el-tab-pane>\r\n        <!-- 英雄可以搭配的搭档 -->\r\n        <el-tab-pane label=\"搭档英雄\" name=\"partners\">\r\n          <el-button @click=\"model.partners.push({})\"> <i class=\"el-icon-plus\"></i> 添加搭档英雄</el-button>\r\n\r\n          <!-- 点击添加图标会添加数据框供数据 -->\r\n          <el-row type=\"flex;\" style=\"flex-wrap: wrap\">\r\n            <el-col :md=\"12\" v-for=\"(item, i) in model.partners\" :key=\"i\">\r\n              <!-- 在hero库中选择英雄 -->\r\n              <el-form-item label=\"描述\" style=\"padding-top: 10px\">\r\n                <el-select filterable v-model=\"item.hero\">\r\n                  <el-option v-for=\"hero in heroes\" :key=\"hero._id\" :value=\"hero._id\" :label=\"hero.name\"> </el-option>\r\n                </el-select>\r\n              </el-form-item>\r\n              <el-form-item label=\"描述\">\r\n                <el-input type=\"textarea\" v-model=\"item.description\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button size=\"small\" type=\"danger\" @click=\"model.partners.splice(i, 1)\">删除</el-button>\r\n              </el-form-item>\r\n            </el-col>\r\n          </el-row>\r\n        </el-tab-pane>\r\n        <el-tab-pane label=\"克制英雄\" name=\"battleHeros\">\r\n          <el-button @click=\"model.battleHeros.push({})\"> <i class=\"el-icon-plus\"></i> 添加克制英雄</el-button>\r\n          <!-- 点击添加图标会添加数据框供数据 -->\r\n          <el-row type=\"flex;\" style=\"flex-wrap: wrap\">\r\n            <el-col :md=\"12\" v-for=\"(item, i) in model.battleHeros\" :key=\"i\">\r\n              <!-- 在hero库中选择英雄 -->\r\n              <el-form-item label=\"描述\" style=\"padding-top: 10px\">\r\n                <el-select filterable v-model=\"item.hero\">\r\n                  <el-option v-for=\"hero in heroes\" :key=\"hero._id\" :value=\"hero._id\" :label=\"hero.name\"> </el-option>\r\n                </el-select>\r\n              </el-form-item>\r\n              <el-form-item label=\"描述\">\r\n                <el-input type=\"textarea\" v-model=\"item.description\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button size=\"small\" type=\"danger\" @click=\"model.battleHeros.splice(i, 1)\">删除</el-button>\r\n              </el-form-item>\r\n            </el-col>\r\n          </el-row>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\" style=\"margin-top: 1rem\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [],\r\n      categories: [],\r\n      heroes: [],\r\n      model: {\r\n        name: '',\r\n        avatar: '',\r\n        scores: {},\r\n        skills: [],\r\n        partners: [],\r\n        battleHeros: []\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 向服务器请求关联英雄数据值\r\n    this.fetchCategories()\r\n    // 初始化向服务器请求英雄相关的item数据\r\n    this.fetchItems()\r\n    // 初始化获取英雄数据\r\n    this.fetchHeros()\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    // 当前端上传文件成功后的操作\r\n    afterUpdate(res) {\r\n      this.model.avatar = res.url\r\n    },\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res // eslint-disable-line no-unused-vars\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/hero/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/hero', this.model)\r\n      }\r\n      this.$router.push('/heros/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const item = await this.$http.get(`/rest/hero/${this.id}`)\r\n      this.model = Object.assign({}, this.model, item.data)\r\n    },\r\n    async fetchCategories() {\r\n      const items = await this.$http.get('/rest/categories')\r\n      this.categories = items.data\r\n    },\r\n    async fetchItems() {\r\n      const res = await this.$http.get('/rest/item')\r\n      this.items = res.data\r\n    },\r\n    async fetchHeros() {\r\n      const res = await this.$http.get('/rest/hero')\r\n      this.heroes = res.data\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\HeroList.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ArticlesEdit.vue",["82"],"<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}文章</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"所属分类\">\r\n        <el-select v-model=\"model.categories\" multiple>\r\n          <!-- :key是关键子必须写 ：label是每个下拉选框的名称 :value是下拉选框的真实对应值， -->\r\n          <el-option v-for=\"item in categories\" :key=\"item._id\" :label=\"item.name\" :value=\"item._id\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"文章标题\">\r\n        <el-input v-model=\"model.title\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"详情\">\r\n        <vue-editor useCustomImageHandler @image-added=\"handleImageAdded\" v-model=\"model.body\"></vue-editor>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { VueEditor } from 'vue2-editor'\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {},\r\n      categories: []\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchCategories()\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  components: {\r\n    VueEditor\r\n  },\r\n  methods: {\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res // eslint-disable-line no-unused-vars\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/article/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/article', this.model)\r\n      }\r\n      this.$router.push('/articles/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const item = await this.$http.get(`/rest/article/${this.id}`)\r\n      this.model = item.data\r\n    },\r\n    async fetchCategories() {\r\n      const item = await this.$http.get('/rest/categories')\r\n      this.categories = item.data\r\n    },\r\n    async handleImageAdded(file, Editor, cursorLocation, resetUploader) {\r\n      const formData = new FormData()\r\n      formData.append('file', file)\r\n      const res = await this.$http.post('uploads', formData)\r\n      Editor.insertEmbed(cursorLocation, 'image', res.data.url)\r\n      resetUploader()\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdsEdit.vue",["83"],"<template>\r\n  <div class=\"about\">\r\n    <!-- 通过路由传来的props值判断是新建数据还是修改数据 -->\r\n    <h1>{{ id ? '修改' : '新建' }}广告</h1>\r\n    <el-form label-width=\"120px\" @submit.native.prevent=\"save\">\r\n      <el-form-item label=\"添加广吿名\">\r\n        <el-input v-model=\"model.name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"添加广吿名\">\r\n        <el-button @click=\"model.items.push({})\"> <i class=\"el-icon-plus\"></i> 添加广告</el-button>\r\n        <!-- 点击添加图标会添加数据框供天数据 -->\r\n        <el-row type=\"flex;\" style=\"flex-wrap: wrap\">\r\n          <el-col :md=\"16\" v-for=\"(item, i) in model.items\" :key=\"i\">\r\n            <!-- 添加英雄名称 -->\r\n            <el-form-item label=\"广告(Url}\">\r\n              <el-input v-model=\"item.url\"></el-input>\r\n            </el-form-item>\r\n            <!-- 添加英雄头像 -->\r\n            <el-form-item label=\"图片\" style=\"margin-top: 0.6rem\">\r\n              <el-upload\r\n                class=\"avatar-uploader\"\r\n                :action=\"$http.defaults.baseURL + '/uploads'\"\r\n                :headers=\"getAuthHeaders()\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"\r\n                  (res) => {\r\n                    $set(item, 'image', res.url)\r\n                  }\r\n                \"\r\n              >\r\n                <img v-if=\"item.image\" :src=\"item.image\" class=\"avatar\" />\r\n                <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n              </el-upload>\r\n            </el-form-item>\r\n\r\n            <el-form-item>\r\n              <el-button size=\"small\" type=\"danger\" @click=\"model.items.splice(i, 1)\">删除</el-button>\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" native-type=\"submit\">提交</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      model: {\r\n        items: []\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 当用户需要编辑时，获取用户信息\r\n    this.id && this.fetch()\r\n  },\r\n  methods: {\r\n    async save() {\r\n      // 保存时，需要判断是否是新创建的数据，如果是就创建。如果不是就修改\r\n      let res // eslint-disable-line no-unused-vars\r\n      if (this.id) {\r\n        res = this.$http.put(`/rest/advertisement/${this.id}`, this.model)\r\n      } else {\r\n        res = await this.$http.post('/rest/advertisement', this.model)\r\n      }\r\n      this.$router.push('/ads/list')\r\n      this.$message({\r\n        type: 'success',\r\n        message: '保存成功'\r\n      })\r\n    },\r\n    async fetch() {\r\n      const res = await this.$http.get(`/rest/advertisement/${this.id}`)\r\n      this.model = Object.assign({}, this.model, res.data)\r\n    }\r\n  },\r\n  // 获取数据库中所有的一级分数据\r\n\r\n  props: {\r\n    id: {}\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>\r\n","D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdsList.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\ArticlesList.vue",[],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdminUserEdit.vue",["84"],"D:\\2023年前端项目练手\\node-vue-moba\\adminliu\\src\\views\\AdminUserList.vue",[],{"ruleId":"85","severity":2,"message":"86","line":43,"column":9,"nodeType":"87","messageId":"88","endLine":43,"endColumn":12},{"ruleId":"85","severity":2,"message":"86","line":46,"column":9,"nodeType":"87","messageId":"88","endLine":46,"endColumn":12},{"ruleId":"85","severity":2,"message":"86","line":207,"column":9,"nodeType":"87","messageId":"88","endLine":207,"endColumn":12},{"ruleId":"85","severity":2,"message":"86","line":51,"column":9,"nodeType":"87","messageId":"88","endLine":51,"endColumn":12},{"ruleId":"85","severity":2,"message":"86","line":70,"column":9,"nodeType":"87","messageId":"88","endLine":70,"endColumn":12},{"ruleId":"85","severity":2,"message":"86","line":39,"column":9,"nodeType":"87","messageId":"88","endLine":39,"endColumn":12},"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar"]